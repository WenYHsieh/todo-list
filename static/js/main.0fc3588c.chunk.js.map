{"version":3,"sources":["TodoItem.js","App.js","index.js"],"names":["TodoWrapper","styled","div","Todo","props","$isDone","Button","ButtonWrapper","TodoItem","id","content","isDone","handleDeleteTodo","handleToggleIsDone","onClick","AppWrapper","Title","Input","input","InputWrapper","$all","$done","$undone","$general","MainWrapper","Filter","App","useRef","useState","todoData","window","localStorage","getItem","JSON","parse","length","current","todos","setTodos","value","setValue","useEffect","setItem","stringify","writeTodoToLocalStorage","filter","setFilter","todo","map","filteredTodos","useMemo","handleSwitchFilter","currentfilter","placeholder","onChange","e","target","$isFilter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0fc3588c.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst TodoWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 10px;\n  width: 100%;\n  margin-top: 10px;\n  background-color: #f4f5f4;\n  padding: 10px 5px;\n`\n\nconst Todo = styled.div`\n  color: black;\n  ${props => props.$isDone && `\n    text-decoration: line-through;\n    color: gray\n  `\n  }\n`\nconst Button = styled.div`\n  width: 50px;\n  height: 20px;\n  font-size: 5px;\n  text-align: center;\n  border: 1px solid gray;\n  margin-left: 10px;\n  line-height: 20px;\n  &:hover {\n    box-shadow: 1px 2px 1px 1px rgb(0, 0, 0, 0.2);\n    cursor: pointer;\n  }\n`\nconst ButtonWrapper = styled.div`\n  display: flex;\n  \n`\n\nexport default function TodoItem ({ id, content, isDone, handleDeleteTodo, handleToggleIsDone }) {\n  return (\n  <TodoWrapper data-todo-id={id}>\n    <Todo $isDone={isDone} key={id}> {content} </Todo>\n    <ButtonWrapper>\n      <Button onClick={()=>{handleToggleIsDone(id)}}> {isDone ? 'unDone':'Done'} </Button>\n      <Button onClick={()=>{handleDeleteTodo(id)}}>delete</Button>\n    </ButtonWrapper>\n  </TodoWrapper>\n  )\n}","import React, { useState, useRef, useEffect, useMemo } from \"react\";\nimport styled from \"styled-components\";\nimport TodoItem from \"./TodoItem\";\n\nconst AppWrapper = styled.div`\n  width: 500px;\n  margin: 20vh auto;\n  border: 1px solid #aba7aa;\n  border-radius: 5px;\n  padding: 10px;\n`;\n\nconst Title = styled.div`\n  color: rgb(100,100,100);\n  font-weight: bold;\n  font-size: 20px\n`\nconst Input = styled.input`\n  width: 400px;\n  border: none;\n  background-color: #eaeaff;\n  padding: 5px;\n  transition: 0.8s;\n  &:hover{\n    cursor: pointer;\n  }\n  &:focus{\n    outline: none;\n    border-bottom: 1px solid gray;\n  }\n`\nconst InputWrapper = styled.div`\n  display: flex;\n  margin-top: 10px;\n  justify-content: space-between;\n  align-items: center;\n`\nconst Button = styled.div`\n  width: 80px;\n  font-size: 12px;\n  border: 1px solid gray;\n  border-radius: 5px;\n  padding: 8px 10px;\n  text-align: center;\n  box-sizing: border-box;\n  margin-left: 15px;\n  &:hover{\n    cursor: pointer;\n  }\n  ${(props) => {    \n    if (props.$all) return `\n      background-color: #cdabdb\n    `\n    if (props.$done) return `\n      background-color: #954ab2\n    `\n    if (props.$undone) return `\n      background-color: #671cbc\n    `\n    if (props.$general) return `\n      background-color: #9bddcd\n    `\n    }\n  }\n`\nconst MainWrapper = styled.div`\n  width: 100%;\n`\nconst Filter = styled.div`\n  display: flex;\n  width: 100%;\n  margin: 10px auto;\n`\nfunction writeTodoToLocalStorage(todos) {\n  window.localStorage.setItem('todos', JSON.stringify(todos))\n}\n\nexport default function App() {\n\n  const id = useRef(1);\n  const [todos, setTodos] = useState(() => {\n    let todoData = window.localStorage.getItem('todos') || '';\n    todoData = JSON.parse(todoData)\n    if (todoData.length === 0) {\n      todoData = []\n    } else {\n      id.current = todoData[0].id + 1\n    }\n    return todoData\n  })\n\n  // 管理 input 的值\n  const [value, setValue] = useState('')\n\n  // 管理 localStorage\n  useEffect( () => {\n    writeTodoToLocalStorage(todos)\n  }, [todos])\n\n  // 管理 filter\n  const [filter, setFilter] = useState(\"all\");\n\n  const handleButtonClick = () => {\n    // input 打完字就會按按鈕，這時候把 value 記錄到的最後的值放到 todo\n    if (!value) return\n    setTodos([\n      {\n        id: id.current,\n        content: value,\n        isDone: false\n      },\n      ...todos\n    ])\n    // 新的 todo 加進去之後， input 的地方就清空 \n    setValue('')\n    id.current++\n  }\n    \n  const handleInputChange = (e) => {\n    // input 變化，把 state 設成輸入的值\n    setValue(e.target.value)\n  }\n\n  const handleDeleteTodo = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id))\n  }\n\n  const handleToggleIsDone = (id) => {\n    setTodos(todos.map(todo => {\n      if (todo.id !== id) return todo\n      return {\n        ...todo,\n        isDone: !todo.isDone\n      }\n    }))\n  }\n\n  const filteredTodos = useMemo(() => {\n    return todos.filter(todo => {\n    if (filter === 'all') return todo\n    // done: 回傳 todo.isDone true, 反之\n    return filter === 'done' ? todo.isDone : !todo.isDone\n    })\n  }, [todos, filter])\n  // dependencies: todos or filter (derived from todos and filters two states) 變化的時候就應該重新計算，其餘的時候不會重新計算\n\n  const handleSwitchFilter = (currentfilter) => {\n    setFilter(currentfilter)\n  }\n\n  const handleClearAll = () => {\n    setTodos([])\n  }\n\n  return (\n    <AppWrapper>\n      <Title>\n        Todo List\n      </Title>\n      <MainWrapper>\n      <InputWrapper>\n          <Input value={value} placeholder='please input todos' onChange={handleInputChange}/>\n          <Button $general onClick={handleButtonClick}> Add </Button>\n      </InputWrapper>\n      <Filter>\n        <Button $all $isFilter onClick={() => handleSwitchFilter(\"all\")}> All </Button>\n        <Button $done $isFilter onClick={() => handleSwitchFilter(\"done\")}> Completed </Button>\n        <Button $undone $isFilter onClick={() => handleSwitchFilter(\"undone\")}> Active </Button>\n        <Button $general $isFilter onClick={handleClearAll}> Clear all </Button>\n      </Filter>\n        {\n          filteredTodos.map((todo) => <TodoItem id={todo.id} content={todo.content} isDone={todo.isDone} handleDeleteTodo={handleDeleteTodo} handleToggleIsDone={handleToggleIsDone} />)\n        }\n      </MainWrapper>\n    </AppWrapper>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}